import hashlib
from datetime import datetime

# Simulated file contents (pretending these are real files)
mock_files = {
    "system32_driver.sys": b"malicious content",
    "notavirus.txt": b"hello world",
    "autorun.bat": b"echo off\nformat C:",
    "funny_cat.jpg": b"\xff\xd8\xff\xe0",  # fake JPEG header
    "legit_tool.exe": b"some binary data"
}

# Simulated known malware hashes (MD5)
known_malware_hashes = {
    hashlib.md5(b"malicious content").hexdigest(),
    hashlib.md5(b"echo off\nformat C:").hexdigest(),
}

# Behavior log list (can be used in report)
behavior_log = []

def log_behavior(msg):
    """Log with timestamp and save in log list."""
    timestamped = f"[{datetime.now()}] {msg}"
    behavior_log.append(timestamped)
    print(timestamped)

def analyze_file(filename, content):
    """Analyze a single file for malware signatures and suspicious behavior."""
    file_hash = hashlib.md5(content).hexdigest()
    suspicious = any(word in filename.lower() for word in ["system32", "autorun", ".bat"])

    if file_hash in known_malware_hashes:
        print(f"[!!!] MALWARE DETECTED: {filename}")
        log_behavior(f"Signature match found in {filename}")
    elif suspicious:
        print(f"[!] Suspicious File: {filename}")
        log_behavior(f"Suspicious pattern detected in {filename}")
    else:
        print(f"[OK] Clean: {filename}")

def scan_simulated_files():
    """Scan all mock files."""
    print("üîç Simulated Malware Scan Started\n")
    for filename, content in mock_files.items():
        analyze_file(filename, content)
    print("\n‚úÖ Scan Complete")

def generate_report():
    """Generate a simple text report of the scan."""
    with open("malware_scan_report.txt", "w") as report_file:
        report_file.write("=== Malware Scan Report ===\n")
        report_file.write(f"Scan Time: {datetime.now()}\n\n")
        for entry in behavior_log:
            report_file.write(entry + "\n")
        report_file.write("\nEnd of Report\n")
    print("\nüìÑ Report saved as 'malware_scan_report.txt'.")

# Main Execution
if __name__ == "__main__":
    scan_simulated_files()
    generate_report()
